buildscript {
    dependencies {
        classpath('com.google.cloud.tools:jib-spring-boot-extension-gradle:0.1.0')
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/milestone" }
        mavenLocal()
        gradlePluginPortal()
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.google.cloud.tools.jib' version '3.4.2'
    id 'org.openapi.generator' version '7.5.0'
    id 'org.ajoberstar.grgit' version '4.1.1'
}

group = 'at.mavila.utilities'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    all {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.integration:spring-integration-http'
    implementation 'org.springframework.integration:spring-integration-jpa'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'

    //Json
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    implementation 'com.github.erosb:everit-json-schema:1.14.2' exclude(group: 'org.json', module: 'json')
    implementation 'org.json:json:20231013'

    //Commons
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //Open API dependencies
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.5.0'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    annotationProcessor 'io.swagger.core.v3:swagger-annotations:2.2.21'

    //Schema validation
    // https://mvnrepository.com/artifact/com.networknt/json-schema-validator
    implementation 'com.networknt:json-schema-validator:1.4.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

def commitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().toLowerCase()
}

jib {

    from {
        image = 'eclipse-temurin:21'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
        }
    }

    to {
        image = 'totopo/hours'
        tags = ["latest"]
        auth {
            username = System.getenv('DOCKER_HUB_USERNAME') ?: ''
            password = System.getenv('DOCKER_HUB_ACCESS_TOKEN') ?: ''
        }
    }

    container {
        mainClass = 'at.mavila.utilities.hours.ranges.Application'
        creationTime = 'USE_CURRENT_TIMESTAMP'
        ports = ['8384']
        labels = ['commitHash': commitHash()]
    }

    pluginExtensions {
        pluginExtension {
            implementation = 'com.google.cloud.tools.jib.gradle.extension.springboot.JibSpringBootExtension'
        }
    }

    // Add the extra directories to the container
    // This will copy the schemas directory to the /app/schemas directory in the container
    // Uncomment this block if you need to copy additional directories to the container

    // ---------------------------------------------
    //    extraDirectories.paths {
    //        path {
    //            setFrom(sourceSets.main.resources.srcDirs.find { it.name == 'resources' }.toString() + "/schemas/")
    //            into = "/app/schemas"
    //        }
    //    }
    // ---------------------------------------------

}

openApiValidate {
    inputSpec = "$rootDir/src/main/resources/static/swagger.yaml".toString()
}

openApiMeta {
    generatorName = "Sample"
    packageName = "org.openapitools.example"
    outputFolder = "$buildDir/meta".toString()
}

openApiGenerate {
    inputSpec = "$projectDir/src/main/resources/static/swagger.yaml".toString()
    outputDir = "$buildDir/generate-resources".toString()
    generatorName = "spring"
    apiPackage = "at.mavila.hours.ranges.api"
    modelPackage = "at.mavila.hours.ranges.model"
    configOptions = [
            dateLibrary            : 'java8-localdatetime',
            interfaceOnly          : 'true',
            generateClientAsBean   : 'false',
            useJakartaEe           : 'true',
            useBeanValidation      : 'true',
            skipDefaultInterface   : 'true',
            hideGenerationTimestamp: 'true',
            useSpringBoot3         : 'true',
            useSpringController    : 'true',
            useOptional            : 'true',
            serializableModel      : 'true',
            cleanupOutputDir       : 'true',
            useSwaggerUI           : 'true',
            annotationLibrary      : 'swagger2',

    ]


}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "$buildDir/generate-resources/src/main/java"]
        }
    }
}

import org.ajoberstar.grgit.Grgit

task updateSwaggerVersion {
    doLast {
        def grgit = Grgit.open(currentDir: projectDir)
        def commitHashGrGit = grgit.head().abbreviatedId

        def swaggerFile = file("$projectDir/src/main/resources/static/swagger.yaml")
        def content = swaggerFile.text

        // Replace the version in the swagger file with the commit hash
        def updatedContent = content.replaceFirst(/version: ".*?"/, "version: \"${commitHashGrGit}\"")

        // Write the updated content back to the swagger file
        swaggerFile.write(updatedContent, "UTF-8")
    }
}

// Make sure the updateSwaggerVersion task runs before the build task
tasks.named('openApiGenerate').configure {
    dependsOn updateSwaggerVersion
}
compileJava.dependsOn tasks.named('openApiGenerate')